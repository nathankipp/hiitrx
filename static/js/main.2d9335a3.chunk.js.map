{"version":3,"sources":["db.js","Lift.js","items.js","App.js","serviceWorker.js","index.js"],"names":["AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","dynamo","DynamoDB","DocumentClient","DEFAULTS","Results","t1","clicks","reset","results","item","value","Date","timeStamp","toLocaleDateString","toLocaleTimeString","intervals","i","index","int","press","Math","round","pressure","push","reduce","a","c","length","className","map","r","key","onClick","Lift","useState","ctext","setCtext","setClicks","active","setActive","res","setRes","pressed","setPressed","triggered","setTriggered","liftTimer","useRef","maxForce","useEffect","Pressure","set","start","current","change","force","unsupported","save","items","Promise","resolve","reject","Item","TableName","data","id","uuid","timestamp","now","user","winNavUa","window","navigator","userAgent","liftItem","trigger","lift","put","err","then","catch","all","rand","random","setTimeout","SAMPLE_SIZE","onPointerDown","e","onPointerUp","clearTimeout","finally","update","forEach","use","App","Boolean","location","hostname","match","addEventListener","preventDefault","ReactDOM","render","StrictMode","to","path","component","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.2d9335a3.chunk.js","sourcesContent":["import AWS from 'aws-sdk';\n// import { COLORS } from '../config';\n\nAWS.config.region = 'us-east-2'; // Region\nAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'us-east-2:1056edee-e9e2-4c61-8f7e-45d31a5ab8a4',\n});\n\nconst dynamo = new AWS.DynamoDB.DocumentClient();\n// const TableName = 'cyclog';\n\n// export function fetchRides() {\n//   return new Promise((resolve, reject) => {\n//     dynamo.scan({ TableName }, (err, data) => {\n//       if (err) {\n//         reject('ride list cannot be retrieved');\n//       } else {\n//         resolve(data.Items.map(ride => ({\n//           ...ride,\n//           color: COLORS.black,\n//         })));\n//       }\n//     });\n//   });\n// }\n\nexport function putItemInTable(Item, TableName) {\n  return new Promise((resolve, reject) => {\n    dynamo.put({ Item, TableName }, (err, data) => {\n      if (err) {\n        reject(`Error: data was not saved to ${TableName}`);\n      } else {\n        resolve();\n      }\n    });\n  });\n}\n\n// export function deleteRide(ride) {\n//   return new Promise((resolve, reject) => {\n//     dynamo.delete({ TableName, Key: { id: ride.id } }, (err, data) => {\n//       if (err) {\n//         reject(err);\n//       } else {\n//         resolve();\n//       }\n//     });\n//   });\n// }\n","import React, { useState, useRef, useEffect } from 'react';\nimport Pressure from 'pressure';\nimport './Lift.css';\nimport { liftItem } from './items';\nimport { putItemInTable } from './db';\n\nconst DEFAULTS = {\n  ctext: 'Press',\n}\nconst DELAY = 1500;\nconst SAMPLE_SIZE = 5;\n\nconst interval = (t1, t2) => t2 - t1;\n\nfunction Results({ clicks, reset }) {\n  const results = [{\n    item: 'Date',\n    value: new Date(clicks[0].timeStamp).toLocaleDateString()\n  },\n  {\n    item: 'Time',\n    value: new Date(clicks[0].timeStamp).toLocaleTimeString()\n  }];\n  const intervals = [];\n  for (let i = 0; i < SAMPLE_SIZE; i += 1) {\n    const index = i * 2;\n    const int = interval(clicks[index].timeStamp, clicks[index+1].timeStamp);\n    const press = Math.round(clicks[index+1].pressure * 1000)/10;\n    results.push({\n      item: `Delay ${i+1}`,\n      value: `${int}ms [${press}%]`\n    });\n    intervals.push(int);\n  }\n  results.push({\n    item: 'Average',\n    value: `${Math.round(intervals.reduce((a, c) => a+c, 0) / intervals.length)}ms`\n  })\n  return (\n    <div className=\"overlay\">\n      <div className=\"modal\">\n        <table>\n          <thead>\n            <tr>\n              <th>Event</th>\n              <th>Result</th>\n            </tr>\n          </thead>\n          <tbody>\n            {results.map(r => (\n              <tr key={r.item}>\n                <td>{r.item}</td>\n                <td>{r.value}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <div className=\"reset\" onClick={reset}>Restart</div>\n      </div>\n    </div>\n  );\n}\n\nfunction Lift() {\n  const [ctext, setCtext] = useState(DEFAULTS.ctext);\n  const [clicks, setClicks] = useState([]);\n  const [active, setActive] = useState(false);\n  const [res, setRes] = useState(false);\n  const [pressed, setPressed] = useState(false);\n  const [triggered, setTriggered] = useState(false);\n  const liftTimer = useRef(null);\n  const maxForce = useRef(0);\n\n  useEffect(() => {\n    Pressure.set('#circle', {\n      start: () => {\n        maxForce.current = 0;\n      },\n      change: force => {\n        maxForce.current = force > maxForce.current ? force : maxForce.current;\n      },\n      unsupported: function(){\n        maxForce.current = -1;\n      },\n    });\n  }, []);\n\n  const update = (ctext, active) => {\n    setCtext(ctext);\n    setActive(active);\n  }\n\n  const save = () => {\n    const items = [];\n    for (let i = 0; i < clicks.length; i += 2) {\n      items.push(new Promise((resolve, reject) => {\n        const item = liftItem({\n            trigger: clicks[i].timeStamp,\n            lift: clicks[i+1].timeStamp,\n            pressure: clicks[i+1].pressure,\n          });\n        putItemInTable(item, 'lift').then(resolve).catch(reject);\n      }));\n    }\n    return Promise.all(items);\n  }\n\n  const reset = () => {\n    save().finally(() => {\n      setRes(false);\n      setClicks([]);\n      update(DEFAULTS.ctext, false);\n    });\n  }\n\n  useEffect(() => {\n    const rand = DELAY + Math.round(Math.random() * 250);\n    if (pressed) {\n      liftTimer.current = setTimeout(() => {\n        setTriggered(true);\n        setClicks(c => [\n          ...c,\n          { timeStamp: Date.now() },\n        ]);\n      }, rand);\n    }\n  }, [pressed]);\n\n  useEffect(() => {\n    if (clicks.length === SAMPLE_SIZE * 2) {\n      setRes(true);\n    }\n  }, [clicks]);\n\n  const pointerDown = (e) => {\n    if (ctext !== DEFAULTS.ctext) {\n      return;\n    }\n    setActive(true);\n    setPressed(true);\n  }\n\n  const pointerUp = (e) => {\n    setPressed(false);\n    if (!active || ctext !== DEFAULTS.ctext) {\n      return;\n    }\n    if (!triggered) {\n      setCtext('!');\n      clearTimeout(liftTimer.current);\n    } else {\n      setCtext('Good');\n      setClicks([\n        ...clicks,\n        {\n          timeStamp: Date.now(),\n          pressure: maxForce.current,\n        },\n      ]);\n    }\n    setActive(false);\n    setTriggered(false);\n    setTimeout(() => setCtext(DEFAULTS.ctext), DELAY);\n  }\n\n  return (\n    <div className=\"Lift\">\n      <div className=\"header\">\n        Press with your thumb.\n        When the screen turns red, lift your thumb.\n        Repeat five times.\n      </div>\n      <div className={`tap ${pressed && 'pressed'} ${triggered && 'triggered'}`}>\n        <div\n          id=\"circle\"\n          className=\"circle\"\n          onPointerDown={pointerDown}\n          onPointerUp={pointerUp}\n        >\n          {ctext}\n        </div>\n      </div>\n      {res && <Results clicks={clicks} reset={reset} />}\n    </div>\n  );\n}\n\nexport default Lift;\n","import { v4 as uuid } from 'uuid';\n\nconst USER = 'unspecified';\n\nexport function liftItem(data) {\n  const {\n    id = uuid(),\n    timestamp = Date.now(),\n    user = USER,\n    winNavUa = window.navigator.userAgent,\n  } = data;\n\n  return {\n    id,\n    timestamp,\n    user,\n    winNavUa,\n    ...data\n  };\n}\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst DELAY = 1500;\n\nconst interval = (t1, t2) => t2 - t1;\n\nfunction Results({ clicks, reset }) {\n  const results = [{\n    item: 'Date',\n    value: new Date(clicks[0]).toLocaleDateString()\n  },\n  {\n    item: 'Time',\n    value: new Date(clicks[0]).toLocaleTimeString()\n  }];\n  const intervals = [];\n  ['2-Tap Int 1','3-Tap Int 1','3-Tap Int 2','4-Tap Int 1','4-Tap Int 2','4-Tap Int 3'].forEach((item, i) => {\n    const use = i === 0\n      ? [1, 2] : i < 3\n      ? [i+2, i+3]\n      : [i+3, i+4];\n    const int = interval(clicks[use[0]], clicks[use[1]]);\n    results.push({\n      item,\n      value: `${int}ms`\n    });\n    intervals.push(int);\n  });\n  results.push({\n    item: 'Average',\n    value: `${Math.round(intervals.reduce((a, c) => a+c, 0) / intervals.length)}ms`\n  })\n  return (\n    <div className=\"overlay\">\n      <div className=\"modal\">\n        <table>\n          <thead>\n            <tr>\n              <th>Event</th>\n              <th>Result</th>\n            </tr>\n          </thead>\n          <tbody>\n            {results.map(r => (\n              <tr key={r.item}>\n                <td>{r.item}</td>\n                <td>{r.value}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <div className=\"reset\" onClick={reset}>Restart</div>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [ctext, setCtext] = useState('Start');\n  const [clicks, setClicks] = useState([]);\n  const [active, setActive] = useState(false);\n  const [res, setRes] = useState(false);\n\n  const update = (ctext, active) => {\n    setCtext(ctext);\n    setActive(active);\n  }\n\n  const reset = () => {\n    setClicks([]);\n    update('Start', false);\n    setRes(false);\n  }\n\n  useEffect(() => {\n    switch(clicks.length) {\n      case 1: {\n        setTimeout(() => {\n          update('2', true);\n        }, 500);\n        break;\n      }\n      case 3: {\n        update('Good', false);\n        setTimeout(() => {\n          update('3', true);\n        }, DELAY);\n        break;\n      }\n      case 6: {\n        update('Good', false);\n        setTimeout(() => {\n          update('4', true);\n        }, DELAY);\n        break;\n      }\n      case 10: {\n        update('Done', false);\n        setTimeout(() => {\n          setRes(true);\n        }, DELAY);\n        break;\n      }\n      default: break;\n    }\n  }, [clicks]);\n\n  const click = e => {\n    if (clicks.length === 0) {\n      setCtext('');\n    } else if (!active) {\n      return;\n    }\n    setClicks([...clicks, Date.now()]);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        Tap Start.  When a number appears, tap the circle that many times as quickly as you can.  Use only your thumb.\n      </div>\n      <div className=\"tap\">\n        <div\n          className={`circle ${active && 'active'}`}\n          onClick={click}\n        >\n          {ctext}\n        </div>\n      </div>\n      {res && <Results clicks={clicks} reset={reset} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { HashRouter as Router, Link, Switch, Route } from 'react-router-dom';\nimport Lift from './Lift';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nwindow.addEventListener(\"contextmenu\", function(e) { e.preventDefault(); })\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <div className=\"links\">\n        <Link to=\"tap\">Tap</Link>\n        <Link to=\"lift\">Lift</Link>\n      </div>\n      <Switch>\n        <Route path=\"/lift\" component={Lift} />\n        <Route component={App} />\n      </Switch>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}